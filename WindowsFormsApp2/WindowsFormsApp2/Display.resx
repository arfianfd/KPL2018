<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="triangle.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>